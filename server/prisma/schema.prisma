// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  emailVerified DateTime?
  image         String?

  posts    Post[]
  comments Comment[]
  likes    Like[]
  replies  Reply[]

  VerificationToken   VerificationToken[]
  ForgotPasswordToken ForgotPasswordToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model ForgotPasswordToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  published Boolean   @default(false)
  imageUrl  String?
  Comments  Comment[]
  Likes     Like[]
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([authorId], name: "authorId")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  reply     Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId], name: "postId")
}

model Like {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id      Int    @id @default(autoincrement())
  content String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([commentId], name: "commentId")
}
